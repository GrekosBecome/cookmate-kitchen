import { PantryItem, ShoppingItem, PantryUnit } from '@/types';

export function updateConfidenceAfterCooking(
  item: PantryItem,
  usedInRecipe: boolean,
  qty?: number
): number {
  if (usedInRecipe) {
    const baseDecrease = qty ? Math.min(30, qty * 5) : 25;
    return Math.max(0, (item.confidence ?? 100) - baseDecrease);
  }
  return item.confidence ?? 100;
}

export function applyTimeDecay(item: PantryItem, now: Date): number {
  const lastSeen = new Date(item.lastSeenAt).getTime();
  const daysSinceLastSeen = (now.getTime() - lastSeen) / (1000 * 60 * 60 * 24);

  if (daysSinceLastSeen > 14) {
    const decayRate = item.favorite ? 5 : 10;
    return Math.max(0, (item.confidence ?? 100) - decayRate);
  }
  return item.confidence ?? 100;
}

export function recalculateShoppingQueue(
  pantryItems: PantryItem[],
  existingQueue: ShoppingItem[]
): ShoppingItem[] {
  const newQueue: ShoppingItem[] = [
    ...existingQueue.filter((item) => !item.bought),
  ];
  const queueNames = new Set(newQueue.map((item) => item.name.toLowerCase()));

  pantryItems.forEach((item) => {
    const normalizedName = item.name.toLowerCase();
    const confidence = item.confidence ?? 100;

    if (queueNames.has(normalizedName) || confidence >= 30) {
      return;
    }

    newQueue.push({
      id: `shop-${Date.now()}-${Math.random()}`,
      name: item.name,
      reason: confidence < 10 ? 'used_up' : 'low_stock',
      suggestedQty: item.qty || getDefaultQty(item.name),
      unit: item.unit,
      autoGenerated: true,
      addedAt: new Date().toISOString(),
      bought: false,
    });
  });

  return newQueue;
}

function getDefaultQty(itemName: string): number {
  const name = itemName.toLowerCase();
  if (name.includes('egg')) return 6;
  if (name.includes('milk')) return 1;
  if (name.includes('rice') || name.includes('pasta')) return 500;
  if (name.includes('oil')) return 1;
  return 1;
}

export function categorizeShoppingItem(name: string): string {
  const n = name.toLowerCase();
  if (/(apple|carrot|tomato|spinach|lettuce|broccoli|onion|garlic|potato|pepper|cucumber)/i.test(n))
    return 'Produce';
  if (/(chicken|beef|fish|pork|meat|salmon|shrimp)/i.test(n))
    return 'Proteins';
  if (/(oil|salt|pepper|sugar|flour|rice|pasta|noodle|spice|herb)/i.test(n))
    return 'Pantry';
  if (/(milk|cheese|yogurt|butter|cream|egg)/i.test(n)) return 'Dairy';
  return 'Misc';
}
